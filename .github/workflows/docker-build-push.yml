# Nome do workflow que aparece na aba Actions do GitHub
name: Build and Push Docker Image

# Define quando o workflow ser치 executado
on:
  push:
    branches:
      - main  # Executa quando h치 push na branch main (para deploy)
  pull_request:
    branches:
      - main  # Executa quando h치 PR para main (apenas para valida칞칚o)

# Vari치veis de ambiente globais usadas em todo o workflow
env:
  REGISTRY: docker.io  # Mant칠m docker.io (registry padr칚o do Docker Hub)
  IMAGE_NAME: bytebank-api-graphql  # Nome da sua imagem (sem o username)

jobs:
  build-and-push:
    # Executa o job em uma m치quina virtual Ubuntu mais recente
    runs-on: ubuntu-latest
    
    # Permiss칫es necess치rias para o job acessar o reposit칩rio e registries
    permissions:
      contents: read      # Permiss칚o para ler o c칩digo do reposit칩rio
      packages: write     # Permiss칚o para escrever no registry de pacotes
      id-token: write     # Permiss칚o para gerar tokens de identidade (necess치rio para atestados)
      attestations: write # Permiss칚o para criar atestados de build
    
    steps:
      # Step 1: Baixa o c칩digo do reposit칩rio para o runner
      - name: Checkout repository
        uses: actions/checkout@v4  # Action oficial para fazer checkout do c칩digo
        
      # Step 2: Extrai a vers칚o do package.json
      - name: Extract version from package.json
        id: package_version  # ID para referenciar a vers칚o em outros steps
        run: |
          # L칡 a vers칚o do package.json e define como output
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "游닍 Vers칚o detectada: $VERSION"
        
      # Step 3: Configura o Docker Buildx (builder avan칞ado do Docker)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3  # Permite builds multi-platform e cache avan칞ado
        
      # Step 4: Faz login no Docker Hub (apenas para push, n칚o para PRs)
      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'  # Condicional: s칩 executa se n칚o for PR
        uses: docker/login-action@v3  # Action oficial para login em registries
        with:
          registry: ${{ env.REGISTRY }}  # Usa a vari치vel REGISTRY definida no env
          username: ${{ secrets.DOCKER_USERNAME }}  # Username do Docker Hub (secret)
          password: ${{ secrets.DOCKER_TOKEN }}     # Token do Docker Hub (secret)
          
      # Step 5: Extrai metadados para tags e labels da imagem
      - name: Extract metadata
        id: meta  # ID do step para referenciar os outputs em outros steps
        uses: docker/metadata-action@v5  # Action para gerar metadados automaticamente
        with:
          images: ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
          # Define tags simplificadas: vers칚o limpa e latest
          tags: |
            type=raw,value=${{ steps.package_version.outputs.version }},enable={{is_default_branch}}   # Tag com vers칚o (ex: 1.0.0)
            type=raw,value=latest,enable={{is_default_branch}}  # Tag 'latest' apenas na branch padr칚o
          # Labels OCI (Open Container Initiative) para metadados da imagem
          labels: |
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}
            org.opencontainers.image.description=ByteBank API - GraphQL API for banking operations
            org.opencontainers.image.vendor=ByteBank
            org.opencontainers.image.version=${{ steps.package_version.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            
      # Step 6: Builda e faz push da imagem Docker
      - name: Build and push Docker image
        id: build  # ID para referenciar outputs deste step
        uses: docker/build-push-action@v5  # Action oficial para build e push
        with:
          context: .                    # Contexto do build (diret칩rio raiz)
          file: ./Dockerfile           # Localiza칞칚o do Dockerfile
          platforms: linux/amd64,linux/arm64  # Arquiteturas suportadas (Intel/AMD e ARM)
          push: ${{ github.event_name != 'pull_request' }}  # S칩 faz push se n칚o for PR
          tags: ${{ steps.meta.outputs.tags }}      # Tags geradas no step anterior
          labels: ${{ steps.meta.outputs.labels }}  # Labels geradas no step anterior
          cache-from: type=gha          # Usa cache do GitHub Actions para acelerar builds
          cache-to: type=gha,mode=max   # Salva cache no GitHub Actions (modo m치ximo)
          
      # Step 7: Gera atestado de build para seguran칞a e proveni칡ncia
      - name: Generate artifact attestation
        if: github.event_name != 'pull_request'  # S칩 gera atestado para pushes reais
        uses: actions/attest-build-provenance@v1  # Action para gerar atestados de seguran칞a
        with:
          subject-name: ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.build.outputs.digest }}  # Hash da imagem buildada
          push-to-registry: true        # Envia o atestado para o registry junto com a imagem
